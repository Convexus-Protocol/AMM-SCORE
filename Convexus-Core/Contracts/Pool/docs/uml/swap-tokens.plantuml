@startuml Token Swap

' Send the tokens to the SwapRouter contract
EOA -> Token0 : transfer ( \
\n   SwapRouter, \
\n   amount0, { \
\n     "method":"exactInputSingle", \
\n     "params": {\
\n       "tokenOut": token1, \
\n       "fee": fee, \
\n       "recipient": EOA, \
\n       "deadline": deadline, \
\n       "amountOutMinimum": amountOutMinimum, \
\n       "sqrtPriceLimitX96": sqrtPriceLimitX96 \
\n    } \
\n  } \
\n)

Token0 -> SwapRouter : tokenFallback ( \
\n   EOA, \
\n   amount0, { \
\n     "method":"exactInputSingle", \
\n     "params": {\
\n       "tokenOut": token1, \
\n       "fee": fee, \
\n       "recipient": EOA, \
\n       "deadline": deadline, \
\n       "amountOutMinimum": amountOutMinimum, \
\n       "sqrtPriceLimitX96": sqrtPriceLimitX96 \
\n    } \
\n  } \
\n)

' The SwapRouter contract performs the swap method
SwapRouter -> ConvexusPool : swap ( \
\n  EOA, \
\n  true, \
\n  amount0, \
\n  sqrtPriceLimitX96, \
\n  bytes(EOA) \
\n)

' The swapped tokens are paid back to the EOA
ConvexusPool -> Token1 : transfer ( \
\n  EOA, \
\n  amount1, { \
\n    "method": "pay" \
\n  } \
\n)

Token1 -> EOA : tokenFallback ( \
\n  ConvexusPool, \
\n  amount1, { \
\n    "method": "pay" \
\n  } \
\n)

ConvexusPool -> SwapRouter : convexusSwapCallback (\
\n  amount0, \
\n  amount1, \
\n  EOA \
\n)

' The SwapRouter contract send the required amount0 of token0
SwapRouter -> Token0 : transfer ( \
\n  ConvexusPool, \
\n  amount0, { \
\n    "method": "pay" \
\n  } \
\n)

Token0 -> ConvexusPool : tokenFallback ( \
\n  SwapRouter, \
\n  amount0, { \
\n    "method": "pay" \
\n  } \
\n)

@enduml