@startuml Tokens Swap

note over recipient
**recipient** wants to swap
amount0 of token0 for a
minimum amountOutMinimum
of token1
end note

group Transfer amount0 of token0

' Send the tokens to the SwapRouter contract
recipient -> Token0 : **transfer** ( \n\
   SwapRouter, \n\
   amount0, { \n\
     "method":"exactInputSingle", \n\
     "params": {\n\
       "tokenOut": token1, \n\
       "fee": fee, \n\
       "recipient": recipient, \n\
       "deadline": deadline, \n\
       "amountOutMinimum": amountOutMinimum, \n\
       "sqrtPriceLimitX96": sqrtPriceLimitX96 \n\
    } \n\
  } \n\
)

Token0 -> SwapRouter : **tokenFallback** ( \n\
   recipient, \n\
   amount0, { \n\
     "method":"exactInputSingle", \n\
     "params": {\n\
       "tokenOut": token1, \n\
       "fee": fee, \n\
       "recipient": recipient, \n\
       "deadline": deadline, \n\
       "amountOutMinimum": amountOutMinimum, \n\
       "sqrtPriceLimitX96": sqrtPriceLimitX96 \n\
    } \n\
  } \n\
)

end group

note over SwapRouter
**SwapRouter** queries **ConvexusFactory**
using the received params for retrieving
the **ConvexusPool** address
end note

SwapRouter -> ConvexusFactory : **getPool** ( \n\
  "token0": token0, \n\
  "token1": token1, \n\
  "fee": fee, \n\
)
activate ConvexusFactory
return ConvexusPool address

note over SwapRouter
Performs the Core Layer swap
to the queried ConvexusPool 
end note

' The SwapRouter contract performs the swap method
SwapRouter -> ConvexusPool : **swap** ( \n\
  recipient, \n\
  true, \n\
  amount0, \n\
  sqrtPriceLimitX96, \n\
  bytes(SwapCallbackData) \n\
)

group#Gold #LightBlue Core Layer
  rnote over ConvexusPool
    Tokens Swap process
  endrnote
end

@enduml